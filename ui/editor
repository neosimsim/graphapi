#!/bin/sh
# Tcl ignores the next line -*- tcl -*- \
exec wish "$0" -- "$@"

# Copyright Â© 2018, Alexander Ben Nasrallah <me@abn.sh>
# Use of this source code is governed by a BSD 3-clause
# style license that can be found in the LICENSE file.

package require Tk
package require json
package require json::write

set type foo

proc log {msg} {
	.c.log insert end "$msg\n"
}

proc loadTypeInfo {type} {
	set input [ open "|curl -s localhost:7070/typeinfo/$type" ]
	set text [ read $input ]
	if {[ catch { close $input } errmsg ]} {
		switch [lindex $::errorCode 2] {
			7 {log "unable to connect to server"}
			default { log $errormsg }
		}
		return [dict create]
	}
	if {[ catch { set d [ json::json2dict $text ] } errmsg ]} {
		log "server response is no valid json:\n$errmsg\n\n$text"
		return [dict create]
	}
	log "received type information from server"
	return $d
}

proc placeForm {d} {
	foreach w [winfo children .c.form] {destroy $w}
	set i 1
	dict for {k v} $d {
		set ::${k}_variable "x"
		if ![dict get $v Visible] {
			continue
		}
		switch [dict get $v Type] {
			boolean {
				grid [ttk::label ".c.form.${k}_label" -text "$k"] -column 1 -row $i -sticky we
				grid [ttk::checkbutton ".c.form.${k}_entry" -width 7 -textvariable "${k}_variable"] -column 2 -row $i
			}
			default {
				grid [ttk::label ".c.form.${k}_label" -text "$k"] -column 1 -row $i -sticky we
				grid [ttk::entry ".c.form.${k}_entry" -width 7 -textvariable "${k}_variable"] -column 2 -row $i
			}
		}
		set i [expr $i +1]
	}
}

proc dictFromFormKeys {keys} {
	set d [dict create]
	foreach key $keys {
		dict set d $key [set ::${key}_variable]
	}
	return $d
}

proc sendDict {x} {
	set y [json::write object {*}[dict map {key val} $x {json::write string $val}]]; puts $y
	set output [ open "|curl -s -X POST -T - localhost:7070/elements/" w ]
	puts $output $y
	if {[ catch { close $output } errmsg ]} {
		switch [lindex $::errorCode 2] {
			7 {log "unable to connect to server"}
			default { log $errmsg }
		}
		return [dict create]
	}
	log "element send"
}

wm title . "Edit element"
grid [ttk::frame .c -padding "3 3 12 12"] -column 0 -row 0 -sticky nwes
grid columnconfigure . 0 -weight 1; grid rowconfigure . 0 -weight 1

grid [ttk::entry .c.type -textvariable type] -column 0 -row 0 -sticky we
bind .c.type <Return> {placeForm [loadTypeInfo $::type]}
grid [ttk::frame .c.form] -column 0 -row 1 -sticky ns
grid [ttk::button .c.send -text "Send" -command {sendDict [dictFromFormKeys [dict keys [loadTypeInfo $::type]]]}] -column 0 -row 2 -sticky se
grid [tk::text .c.log -height 5] -column 0 -row 3 -sticky wse

grid columnconfigure .c 0 -weight 1
grid rowconfigure .c 1 -weight 1
grid columnconfigure .c.form 0 -weight 1

set d [loadTypeInfo $type]
placeForm $d
